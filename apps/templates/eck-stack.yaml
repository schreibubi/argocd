apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: eck-stack
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  project: default
  sources:
    - repoURL: https://helm.elastic.co
      chart: eck-stack
      targetRevision: 0.8.0
      helm:
        parameters:
        - name: "eck-logstash.enabled"
          value: "true"
        - name: "eck-beats.enabled"
          value: "false"
        valuesObject:
          eck-elasticsearch:
            annotations:
              eck.k8s.elastic.co/license: basic
            spec:
              nodeSets:
              - name: default
                count: 3
                config:
                  node.store.allow_mmap: false
                volumeClaimTemplates:
                - metadata:
                    name: elasticsearch-data
                  spec:
                    accessModes:
                    - ReadWriteOnce
                    resources:
                      requests:
                        storage: 10Gi
              http:
                tls:
                  selfSignedCertificate:
                    disabled: true
                service:
                  spec:
                    type: LoadBalancer
          eck-kibana:
            annotations:
              eck.k8s.elastic.co/license: basic
            spec:
              http:
                tls:
                  selfSignedCertificate:
                    disabled: true
                service:
                  spec:
                    type: LoadBalancer
          eck-logstash:
            annotations:
              eck.k8s.elastic.co/license: basic
            elasticsearchRefs:
              - clusterName: eck
                name: elasticsearch
            pipelines:
              - pipeline.id: main
                config.string: |
                  input {
                    tcp {
                      port => 5000
                      type => syslog
                    }
                  }
                  filter {
                    if [type] == "syslog" {
                      grok {
                        match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
                        add_field => [ "received_at", "%{@timestamp}" ]
                        add_field => [ "received_from", "%{host}" ]
                      }
                      date {
                        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
                      }
                    }
                  }
                  output {
                    elasticsearch {
                      hosts => [ "${ECK_ES_HOSTS}" ]
                      user => "${ECK_ES_USER}"
                      password => "${ECK_ES_PASSWORD}"
                      ssl_certificate_authorities => "${ECK_ES_SSL_CERTIFICATE_AUTHORITY}"
                    }
                  }
            services:
              - name: logstash-tcp-input
                service:
                  spec:
                    type: ClusterIP
                    ports:
                      - port: 5000
                        name: "logstash-input-service"
                        protocol: TCP
                        targetPort: 5000
    - repoURL: {{ .Values.spec.source.repoURL }}
      targetRevision: {{ .Values.spec.source.targetRevision }}
      path: config/eck-stack
  destination:
    server: {{ .Values.spec.destination.server }}
    namespace: elastic-stack
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
